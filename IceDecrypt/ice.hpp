#pragma once

// https://darkside.com.au/ice

// Types

typedef unsigned long ULONG;

typedef unsigned int UINT;

typedef unsigned short WORD;

typedef unsigned char BYTE;

struct ICE_SUBKEY
{
	UINT val[3];
};

struct ICE_KEY
{
	int	        size;
	int	        rounds;
	ICE_SUBKEY* keys;
};

// The S-boxes

static ULONG ice_sbox[4][1024];
static int ice_sboxes_initialized = 0;

// Modulo values for the S-boxes

static const int ice_smod[4][4] = 
{
	{ 333, 313, 505, 369 },
	{ 379, 375, 319, 391 },
	{ 361, 445, 451, 397 },
	{ 397, 425, 395, 505 } 
};

// XOR values for the S-boxes

static const int ice_sxor[4][4] = 
{
	{ 0x83, 0x85, 0x9B, 0xCD },
	{ 0xCC, 0xA7, 0xAD, 0x41 },
	{ 0x4B, 0x2E, 0xD4, 0x33 },
	{ 0xEA, 0xCB, 0x2E, 0x04 } 
};

// Permutation values for the P-box

static const ULONG ice_pbox[32] = 
{
	0x00000001, 0x00000080, 0x00000400, 0x00002000,
	0x00080000, 0x00200000, 0x01000000, 0x40000000,
	0x00000008, 0x00000020, 0x00000100, 0x00004000,
	0x00010000, 0x00800000, 0x04000000, 0x20000000,
	0x00000004, 0x00000010, 0x00000200, 0x00008000,
	0x00020000, 0x00400000, 0x08000000, 0x10000000,
	0x00000002, 0x00000040, 0x00000800, 0x00001000,
	0x00040000, 0x00100000, 0x02000000, 0x80000000 
};

// The key rotation schedule

static const int ice_keyrot[16] = 
{
	0, 1, 2, 3, 2, 1, 3, 0,
	1, 3, 2, 0, 3, 1, 0, 2 
};

// Forward declarations

void ice_set(ICE_KEY* ik, const BYTE* key);

void ice_key_create(ICE_KEY* ik);

void ice_key_decrypt(ICE_KEY* ik, const BYTE* ctext, BYTE* ptext);

// Input

static unsigned char data[] = 
{
65, 0x44, 0x4A, 0x15, 0x44, 0x6E, 0x20, 0x49, 0x09, 0x51, 0xB0, 0x43, 0xCB, 0xEC, 0x17, 0x5D, 0x1C, 0xD7, 0xBD, 0x27, 0xF1, 0xE2, 0x0D, 0xEC, 0x6C, 0x52, 0xC5, 0x80, 0x17, 0x93, 0x0D, 0x0A, 0x47, 0x4D, 0x2D, 0x1F, 0x8D, 0x83, 0xDC, 0x0D, 0x0A, 0x8E, 0x16, 0xBC, 0x3C, 0x7E, 0x72, 0x2C, 0xEF, 0x3A, 0xF1, 0x40, 0x90, 0xBC, 0xED, 0x94, 0x24, 0xF8, 0xD1, 0x4C, 0xBD, 0x6A, 0x47, 0x21, 0x5F, 0x1C, 0xE2, 0x08, 0x91, 0x6D, 0xA7, 0x34, 0xE9, 0x57, 0x7F, 0x82, 0x32, 0xEC, 0x4C, 0xA2, 0xD4, 0x09, 0x33, 0x42, 0xF2, 0xB7, 0x48, 0x51, 0x86, 0xFD, 0x3F, 0x5C, 0x88, 0x20, 0xCE, 0x4C, 0x19, 0x9F, 0x7B, 0x7F, 0x5E, 0xF8, 0xCA, 0x6D, 0xE2, 0xC1, 0x26, 0xF1, 0x61, 0x2E, 0x84, 0x92, 0x18, 0x43, 0x1C, 0xB7, 0x57, 0xA0, 0x2E, 0xD8, 0xF5, 0x8A, 0x2B, 0xF3, 0xBF, 0x6E, 0xA2, 0xDF, 0x44, 0xC7, 0x9D, 0xDA, 0xD4, 0xF8, 0xC7, 0xFF, 0x92, 0x19, 0x4C, 0x93, 0x34, 0xA8, 0xC7, 0x7D, 0x4C, 0x43, 0x54, 0x31, 0x91, 0x89


};