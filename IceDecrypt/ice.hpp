#pragma once

// https://darkside.com.au/ice

// Types

typedef unsigned long ULONG;

typedef unsigned int UINT;

typedef unsigned short WORD;

typedef unsigned char BYTE;

struct ICE_SUBKEY
{
	UINT val[3];
};

struct ICE_KEY
{
	int	        size;
	int	        rounds;
	ICE_SUBKEY* keys;
};

// The S-boxes

static ULONG ice_sbox[4][1024];
static int ice_sboxes_initialized = 0;

// Modulo values for the S-boxes

static const int ice_smod[4][4] = 
{
	{ 333, 313, 505, 369 },
	{ 379, 375, 319, 391 },
	{ 361, 445, 451, 397 },
	{ 397, 425, 395, 505 } 
};

// XOR values for the S-boxes

static const int ice_sxor[4][4] = 
{
	{ 0x83, 0x85, 0x9B, 0xCD },
	{ 0xCC, 0xA7, 0xAD, 0x41 },
	{ 0x4B, 0x2E, 0xD4, 0x33 },
	{ 0xEA, 0xCB, 0x2E, 0x04 } 
};

// Permutation values for the P-box

static const ULONG ice_pbox[32] = 
{
	0x00000001, 0x00000080, 0x00000400, 0x00002000,
	0x00080000, 0x00200000, 0x01000000, 0x40000000,
	0x00000008, 0x00000020, 0x00000100, 0x00004000,
	0x00010000, 0x00800000, 0x04000000, 0x20000000,
	0x00000004, 0x00000010, 0x00000200, 0x00008000,
	0x00020000, 0x00400000, 0x08000000, 0x10000000,
	0x00000002, 0x00000040, 0x00000800, 0x00001000,
	0x00040000, 0x00100000, 0x02000000, 0x80000000 
};

// The key rotation schedule

static const int ice_keyrot[16] = 
{
	0, 1, 2, 3, 2, 1, 3, 0,
	1, 3, 2, 0, 3, 1, 0, 2 
};

// Forward declarations

void ice_set(ICE_KEY* ik, const BYTE* key);

void ice_key_create(ICE_KEY* ik);

void ice_key_decrypt(ICE_KEY* ik, const BYTE* ctext, BYTE* ptext);

// Input

static unsigned char data[] = 
{
0x5F, 0x87, 0xA0, 0x02, 0x01, 0x00, 0x00, 0x00, 0xEE, 0xF0, 0x24, 0xDB, 0x1F, 0xED, 0xCC, 0x0E, 0x5F, 0x41, 0x31, 0x16, 0x1D, 0xFC, 0xF4, 0xC9, 0x16, 0x93, 0xD7, 0x51, 0x92, 0xF2, 0x53, 0xD6, 0x22, 0xD7, 0x28, 0xDD, 0xCE, 0x3D, 0xC4, 0x0B, 0x21, 0x06, 0x3B, 0xE8, 0xDC, 0x38, 0xD5, 0x98, 0x6D, 0x6F, 0xB1, 0x37, 0xF5, 0xAB, 0xEB, 0xE0, 0xD2, 0xC6, 0x17, 0x82, 0x31, 0x81, 0x98, 0x36, 0xFD, 0x20, 0xB7, 0xD4, 0x9A, 0xED, 0x2F, 0x48, 0x32, 0xC7, 0xEF, 0xCB, 0x5D, 0x3B, 0x46, 0x5B, 0x0F, 0x9B, 0x41, 0x20, 0x3B, 0x58, 0x52, 0xD4, 0x8D, 0x70, 0xBC, 0xF7, 0xE6, 0x57, 0xD9, 0x34, 0x64, 0xD7, 0x22, 0xBA, 0x0B, 0xC3, 0xCD, 0xA3, 0x2D, 0x27, 0x85, 0x80, 0x9B, 0xEB, 0xA3, 0xB1, 0x1C, 0xAA, 0xC0, 0x9D, 0x52, 0x37, 0x5C, 0xE2, 0x7A, 0xB0, 0x5B, 0xDD, 0xEB, 0x41, 0xC1, 0x35, 0x32, 0xBB, 0x0C, 0xB2, 0xF5, 0x55, 0x8C, 0xF7, 0xA4, 0xAF, 0x02, 0x12, 0x81, 0x7F, 0x0B, 0xC8, 0xD2, 0xCF, 0x36, 0x70, 0x9F, 0x4A, 0x5D, 0x2D, 0xF5, 0x9A, 0x61, 0x67, 0xF3, 0xE9, 0x99, 0xAC, 0x18, 0x64, 0xF4, 0xCB, 0xD7, 0xAA, 0x46, 0xDD, 0xDF, 0xF5, 0x44, 0xBF, 0xCF, 0xD7, 0x62, 0xC2




};